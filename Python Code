import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Conv1D, GlobalMaxPooling1D
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Data upload (Yelp, Amazon, IMDB yorumlarÄ±)
def load_data():
    column_name = ['Review', 'Sentiment']
    data_yelp = pd.read_csv("/content/yelp_labelled.txt", sep='\t', header=None, names=column_name)
    data_amazon = pd.read_csv("/content/amazon_cells_labelled.txt", sep='\t', header=None, names=column_name)
    data_imdb = pd.read_csv("/content/imdb_labelled.txt", sep='\t', header=None, names=column_name)
    return pd.concat([data_yelp, data_amazon, data_imdb], ignore_index=True)

data = load_data()

# Data preprocessing
X = data['Review'].values
y = data['Sentiment'].values

# Using a tokenizer to convert data into numbers
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(X)
X_sequences = tokenizer.texts_to_sequences(X)
X_padded = pad_sequences(X_sequences, maxlen=100)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X_padded, y, test_size=0.2, random_state=0)

# LSTM Model
lstm_model = Sequential([
    Embedding(input_dim=5000, output_dim=64, input_length=100),
    LSTM(64),
    Dense(1, activation='sigmoid')
])
lstm_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
lstm_model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=1)

# CNN Model
cnn_model = Sequential([
    Embedding(input_dim=5000, output_dim=64, input_length=100),
    Conv1D(64, 5, activation='relu'),
    GlobalMaxPooling1D(),
    Dense(1, activation='sigmoid')
])
cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
cnn_model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=1)

# Dense Model
dense_model = Sequential([
    Embedding(input_dim=5000, output_dim=64, input_length=100),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])
dense_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
dense_model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=1)

# Evalution of the models
def evaluate_model(model, X_test, y_test, name):
    y_pred = (model.predict(X_test) > 0.5).astype("int32")
    print(f"\n{name} Model Performance:")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print(classification_report(y_test, y_pred))

evaluate_model(lstm_model, X_test, y_test, "LSTM")
evaluate_model(cnn_model, X_test, y_test, "CNN")
evaluate_model(dense_model, X_test, y_test, "Dense Model")
